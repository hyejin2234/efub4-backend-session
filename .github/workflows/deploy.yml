name: CI/CD with Docker

# solution 브랜치에 push하면 워크플로우 실행
on:
  push:
    branches: [ "week11" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # repository secret에 올린 application.yml 빌드 시 생성
      - name: Make application.yml
        run: |
        # 최상위 루트가 blog가 아니기 때문에 ./blog를 써줘야함
          mkdir ./blog/src/main/resources 
          cd ./blog/src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml


      # 프로젝트를 빌드
      - name: Build with Gradle
        run: |
          cd ./blog
          chmod +x ./gradlew
          ./gradlew build -x test


      # ID, PW를 이용해 Docker hub에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


     # Docker 이미지 빌드 후 푸시
      - name: Docker build & push
        uses: docker/buld-push-action@v2
        with:
          # 빌드 컨텍스트 지정: 지정한 디렉터리 안에 dockerfile이 있어야함
          context: ./blog
          # 빌드에 사용할 dockerfile의 경로 지정
          file: ./blog/Dockerfile
          # 빌드할 이미지의 플랫폼 지정
          platforms: linux/arm64/v8
          # 빌드 후 docker 레지스토리에 푸시할지 여부 지정
          push: true
          # 이미지 태그 지정
          tags: ${{ secrets.DOCKER_REPO }}:latest


      # SSH를 사용하여 EC2에 명령을 전달
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          # 원격 서버의 호스트 주소 지정
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          # 아래 명령들을 실행
          scripts: |
          # 서버에서 실행 중인 docker 컨테이너 제거
            sudo docker rm -f $(sudo docker ps -qa)
          # docker 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
          # docker 컨테이너 실행 (-d: 서버 계속 돌아가도록, -p: port번호 지정)
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
          # 사용하지 않는 이미지 정리
            sudo docker image prune -f
          
